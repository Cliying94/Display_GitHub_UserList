@page "/GitHubUserList"
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization;
@inject IHttpClientFactory ClientFactory
<h3>GitHubUserList</h3>

@if (getBranchesError)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <ul>
        <li>Nymber of users :@usersJSON.Count().ToString();</li>
        @foreach (var users in usersJSON)
        {  
            <div class="user" >
                <img class="user_img" src="@users.avatar_url" alt="avatar_url">
                <p class="username" style="margin:auto">@users.login.ToString()</p>
            @if(@users.site_admin==true){<div class="admin_badge" ><p>Admin</p></div>}
            </div>

        }
    </ul>
}



@code {
    private IEnumerable<GitHubUsers> usersJSON = Array.Empty<GitHubUsers>();
    private bool getBranchesError;
    private bool shouldRender;


    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://api.github.com/users");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            usersJSON = await JsonSerializer.DeserializeAsync
                <IEnumerable<GitHubUsers>>(responseStream);
 
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

    public class GitHubUsers
    {
        [JsonPropertyName("avatar_url")]
        public string avatar_url { get; set; }
        [JsonPropertyName("login")]
        public string login { get; set; }
        [JsonPropertyName("site_admin")]
        public bool site_admin { get; set; }
    }
}